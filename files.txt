
===== ./src/main/java/sistema_reservas/controller/AdminController.java =====
package sistema_reservas.controller;

import java.security.Principal;
import java.time.LocalDate;
import java.util.List;

import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import sistema_reservas.dto.HabitacionListadoDto;
import sistema_reservas.model.Usuario;
import sistema_reservas.repository.EstadoHabitacionRepository;
import sistema_reservas.repository.EstadoReservaRepository;
import sistema_reservas.repository.RolRepository;
import sistema_reservas.repository.TipoHabitacionDtoRepository;
import sistema_reservas.service.HabitacionService;
import sistema_reservas.service.UsuarioService;

@Controller
public class AdminController {

	@Autowired
	private UsuarioService usuarioService;
	@Autowired
	private RolRepository rolRepository;
    @Autowired
    private HabitacionService habitacionService;
    @Autowired
    private TipoHabitacionDtoRepository tipoHabitacionDtoRepository;
    @Autowired
    private EstadoReservaRepository estadoReservaRepository;
    @Autowired
    private EstadoHabitacionRepository estadoHabitacionRepository;

	@GetMapping("/admin/inicio")
    public String inicioAdmin(
            @RequestParam(required = false) Integer tipoHabId,
            @RequestParam(required = false) Integer estadoHabId,
            @RequestParam(required = false) Integer estadoReservaId,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fechaInicio,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fechaFin,
            HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());

        List<HabitacionListadoDto> habitaciones = habitacionService.obtenerHabitacionesFiltro(
                tipoHabId, estadoHabId, estadoReservaId,
                fechaInicio != null ? java.sql.Date.valueOf(fechaInicio) : null,
                fechaFin != null ? java.sql.Date.valueOf(fechaFin) : null
        );

        model.addAttribute("habitaciones", habitaciones);

        model.addAttribute("tipos", tipoHabitacionDtoRepository.findAll());
        model.addAttribute("estadosHab", estadoHabitacionRepository.findAll());
        model.addAttribute("estadosReserva", estadoReservaRepository.findAll());

        return "admin/adminInicio";
    }
	
	@GetMapping("/admin/consultas")
    public String gestionConsultas(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());
        return "admin/adminConsultas";
    }

    @GetMapping("/admin/usuarios")
    public String gestionUsuarios(
            @RequestParam(required = false) Integer rolid,
    		HttpServletRequest request, Model model) {
    	
        model.addAttribute("currentPath", request.getRequestURI());
        model.addAttribute("usuarios",usuarioService.obtenerUsuarios(rolid));
        model.addAttribute("roles", rolRepository.findAll());
        model.addAttribute("rolSeleccionado", rolid);
        
        return "admin/adminUsuarios";
    }

    @GetMapping("/admin/mantenimientos")
    public String gestionMantenimientos(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());
        return "admin/adminHabitaciones";
    }

    @GetMapping("/admin/reservas")
    public String gestionReservas(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());
        return "admin/adminReservas";
    }

    @GetMapping("/admin/perfil")
    public String gestionPerfil(
            HttpSession session,
            HttpServletRequest request, Model model){
        model.addAttribute("currentPath", request.getRequestURI());

        Integer id = (Integer) session.getAttribute("usuarioId");
        if(id == null) return "redirect:/login";

        Usuario perfil = usuarioService.obtenerPerfil(id);
        model.addAttribute("perfil", perfil);

        return "admin/adminPerfil";
    }
    
    @GetMapping("/admin/perfil/editarPerfil")
    public String gestionEditarPerfil(HttpServletRequest request, Model model, Principal principal) {
        model.addAttribute("currentPath", request.getRequestURI());

        String correo = principal.getName();
        Usuario perfil = usuarioService.obtenerPerfilPorCorreo(correo);
        model.addAttribute("perfil", perfil);
        
        return "admin/adminEditarPerfil";
    }
    
    @PostMapping("/admin/perfil/guardar")
    public String guardarPerfil(
            @ModelAttribute Usuario usuario,
    		HttpServletRequest request, Model model) {
    	model.addAttribute("currentPath", request.getRequestURI());

        usuarioService.actualizarPerfil(usuario);
        
        return "redirect:/admin/perfil";
    }
}
===== ./src/main/java/sistema_reservas/controller/ClienteController.java =====
package sistema_reservas.controller;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import sistema_reservas.dao.HabitacionDao;
import sistema_reservas.dto.HabitacionDto;
import sistema_reservas.dto.PisoDto;
import sistema_reservas.model.TipoHabitacion;
import sistema_reservas.repository.TipoHabitacionRepository;

@Controller
public class ClienteController {

    @Autowired
    private TipoHabitacionRepository tipoHabitacionRepository;


    @Autowired
    private HabitacionDao habitacionDao;

	@GetMapping("/cliente/inicio")
    public String inicioCliente(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());

        List<TipoHabitacion> tipos = tipoHabitacionRepository.findAll();
        model.addAttribute("tipos", tipos);

        return "cliente/clienteInicio";
    }

    @GetMapping("/cliente/habitaciones")
    public String habitacionesCliente(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());

        List<TipoHabitacion> tipos = tipoHabitacionRepository.findAll();
        model.addAttribute("tipos", tipos);
        
        return "cliente/clienteHabitaciones";
    }

    @PostMapping("/cliente/seleccionar-fechas")
    public String seleccionarFechas(
            @RequestParam("tipohabId") int tipohabId,
                    HttpServletRequest request,
                    Model model) {

        // Fechas por defecto
        LocalDate fechaEntrada = LocalDate.now();
        LocalDate fechaSalida = fechaEntrada.plusDays(1);

        int adultos = 2;
        int ninos = 0;
        int cantidadPersonas = adultos + ninos;

        List<PisoDto> pisos = habitacionDao.listarPisosPorTipo(tipohabId);

        Integer pisoSeleccionado = !pisos.isEmpty() ? pisos.get(0).getIdpiso() : null;

        List<HabitacionDto> habitaciones = habitacionDao.listarHabitacionesDisponibles(
                fechaEntrada, fechaSalida, tipohabId, pisoSeleccionado, cantidadPersonas
        );

        model.addAttribute("currentPath", request.getRequestURI());
        model.addAttribute("tipohabId", tipohabId);
        model.addAttribute("pisos", pisos);
        model.addAttribute("fechaEntrada", fechaEntrada);
        model.addAttribute("fechaSalida", fechaSalida);
        model.addAttribute("pisoSeleccionado", pisoSeleccionado);
        model.addAttribute("habitaciones", habitaciones);
        model.addAttribute("adultos", adultos);
        model.addAttribute("ninos", ninos);
        model.addAttribute("capacidadPersonas", cantidadPersonas);

        List<TipoHabitacion> tipos = tipoHabitacionRepository.findAll();
        model.addAttribute("tipos", tipos);

        return "cliente/clienteHabitaciones";
    }

    @PostMapping("/cliente/filtrar-habitaciones")
    public String filtrarHabitaciones(
            @RequestParam("tipohabId") int tipohabId,
            @RequestParam("fechaEntrada") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fechaEntrada,
            @RequestParam("fechaSalida") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fechaSalida,
            @RequestParam("pisoId") int pisoId,
            @RequestParam(value = "adultos") int adultos,
            @RequestParam(value = "ninos", required = false, defaultValue = "0") Integer ninos,
            HttpServletRequest request,
            Model model
    ) {
        int cantidadPersonas = adultos + ninos;

        List<PisoDto> pisos = habitacionDao.listarPisosPorTipo(tipohabId);
        List<HabitacionDto> habitaciones = habitacionDao.listarHabitacionesDisponibles(
                fechaEntrada, fechaSalida, tipohabId, pisoId, cantidadPersonas);

        if ((adultos + ninos) > 2) {
            model.addAttribute("capacidadExcedida", true);
            habitaciones = new ArrayList<>();
        }

        model.addAttribute("currentPath", request.getRequestURI());
        model.addAttribute("tipohabId", tipohabId);
        model.addAttribute("pisos", pisos);
        model.addAttribute("fechaEntrada", fechaEntrada);
        model.addAttribute("fechaSalida", fechaSalida);
        model.addAttribute("pisoSeleccionado", pisoId);
        model.addAttribute("habitaciones", habitaciones);
        model.addAttribute("capacidadPersonas", cantidadPersonas);

        return "cliente/clienteHabitaciones"; // misma vista
    }

    @GetMapping("/cliente/mi-seleccion")
    public String miSeleccion(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());
        return "cliente/clienteMiSeleccion"; // aún por crear
    }

    @GetMapping("/cliente/mis-reservas")
    public String misReservas(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());
        return "cliente/clienteMisReservas"; // aún por crear
    }

    @GetMapping("/cliente/perfil")
    public String perfil(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());
        return "cliente/clientePerfil"; // aún por crear
    }
}
===== ./src/main/java/sistema_reservas/controller/MainController.java =====
package sistema_reservas.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class MainController {

	@GetMapping("/")
	public String inicio(HttpServletRequest request, Model model) {
		model.addAttribute("currentPath", request.getRequestURI());
		return "index";
	}
	@GetMapping("/habitaciones")
	public String habitaciones(HttpServletRequest request, Model model) {
		model.addAttribute("currentPath", request.getRequestURI());
		return "habitaciones";
	}



}
===== ./src/main/java/sistema_reservas/controller/UsuarioController.java =====
package sistema_reservas.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;
import sistema_reservas.model.Rol;
import sistema_reservas.model.Usuario;
import sistema_reservas.repository.RolRepository;
import sistema_reservas.repository.UsuarioRepository;

@Controller
public class UsuarioController {

	@Autowired
    private UsuarioRepository usuarioRepository;

	@Autowired
	private RolRepository rolRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;

    // Mostrar formulario de registro
    @GetMapping("/login/registroUsuario")
    public String mostrarRegistro(HttpServletRequest request, Model model) {
        model.addAttribute("currentPath", request.getRequestURI());
        return "login/registroUsuario";
    }

    // Procesar formulario de registro
    @PostMapping("/login/registroUsuario")
    public String procesarRegistro(@RequestParam("nombre") String nombre,
                                   @RequestParam("apellido") String apellido,
                                   @RequestParam("dni") Integer dni,
                                   @RequestParam("correo") String correo,
                                   @RequestParam("password") String password,
                                   Model model) {

        // Verifica si el correo ya está registrado
        //if (usuarioRepository.findByCorreo(correo).isPresent()) {
          //  model.addAttribute("error", "El correo ya está registrado.");
          //  return "registroUsuario";
       //}

        // Buscar el rol "CLIENTE" en la tabla roles
        Rol rolCliente = rolRepository.findByNombre("CLIENTE"); // debe devolver un Rol válido

        // Crear el nuevo usuario
        Usuario nuevo = new Usuario();
        nuevo.setNombre(nombre);
        nuevo.setApellido(apellido);
        nuevo.setDni(dni);
        nuevo.setCorreo(correo);
        nuevo.setPassword(passwordEncoder.encode(password));
        nuevo.setRol(rolCliente); // aquí se asigna el objeto Rol
        System.out.println("Registrando usuario: " + nuevo.getCorreo() + ", Rol: " + nuevo.getRol().getNombre());

        usuarioRepository.save(nuevo);

        return "redirect:/login";
    }

    
    //REDIRECCIONAR SEGUN ROL DEL USUARIO
    
    @GetMapping("/rol/redireccionar")
    public String redireccionSegunRol(Authentication auth) {
        System.out.println("Autenticación: " + auth);
        if (auth != null) {
            System.out.println("Autoridades: " + auth.getAuthorities());
            if (auth.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_ADMIN"))) {
                System.out.println("Redirigiendo a admin...");
                return "redirect:/admin/inicio";
            } else if (auth.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_CLIENTE"))) {
                System.out.println("Redirigiendo a cliente...");
                return "redirect:/cliente/inicio";
            }
        }
        System.out.println("Redirigiendo a login con error...");
        return "redirect:/login?error";
    }
}
===== ./src/main/java/sistema_reservas/dao/HabitacionDao.java =====
package sistema_reservas.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cglib.core.Local;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import sistema_reservas.dto.HabitacionDto;
import sistema_reservas.dto.HabitacionListadoDto;
import sistema_reservas.dto.PisoDto;

import java.time.LocalDate;
import java.util.Date;
import java.util.List;

@Repository
public class HabitacionDao {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public List<HabitacionListadoDto> listarHabitacionesFiltro(
            Integer tipoHabId,
            Integer estadoHabId,
            Integer estadoReservaId,
            Date fechaInicio,
            Date fechaFin
    ){
        return jdbcTemplate.query(
                "CALL SP_ListarHabTipoEstado(?, ?, ?, ?, ?)",
                new BeanPropertyRowMapper<>(HabitacionListadoDto.class),
                tipoHabId,
                estadoHabId,
                estadoReservaId,
                fechaInicio,
                fechaFin);
    }

    /*CLIENTE*/
    public List<PisoDto> listarPisosPorTipo(int tipohabId) {
        return jdbcTemplate.query(
                "CALL SP_ListarPisosPorTipo(?)",
                new Object[]{tipohabId},
                (rs, rowNum) -> {
                    PisoDto piso = new PisoDto();
                    piso.setIdpiso(rs.getInt("idpiso"));
                    piso.setNombre(rs.getString("nombre"));
                    return piso;
                }
        );
    }

    public List<HabitacionDto> listarHabitacionesDisponibles(
            LocalDate fechaEntrada,
            LocalDate fechaSalida,
            Integer tipohabId,
            Integer pisoId,
            Integer cantidadPersonas
    ) {
        return jdbcTemplate.query(
                "CALL SP_ListarHabitacionesDisponibles(?, ?, ?, ?, ?)",
                new BeanPropertyRowMapper<>(HabitacionDto.class),
                fechaEntrada,
                fechaSalida,
                tipohabId,
                pisoId,
                cantidadPersonas);
    }


}
===== ./src/main/java/sistema_reservas/dao/UsuarioDao.java =====
package sistema_reservas.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import sistema_reservas.dto.UsuarioListadoDto;
import sistema_reservas.model.Usuario;

import java.util.List;

@Repository
public class UsuarioDao {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public List<UsuarioListadoDto> listarUsuariosPorRol(Integer rolid) {
        return jdbcTemplate.query(
                "CALL SP_ListarUsuariosPorRol(?)",
                new BeanPropertyRowMapper<>(UsuarioListadoDto.class),
                rolid
        );
    }

    public Usuario obtenerPerfilId(Integer usuarioId) {
        return jdbcTemplate.queryForObject(
                "CALL SP_Perfil(?)",
                new BeanPropertyRowMapper<>(Usuario.class),
                usuarioId);
    }

    public Usuario obtenerPerfilCorreo(String correo) {
        return jdbcTemplate.queryForObject(
                "SELECT idusuario, nombre, apellido, dni, correo, password FROM Usuarios WHERE correo = ?",
                new BeanPropertyRowMapper<>(Usuario.class),
                correo);
    }

    public void actualizarPerfil(
            Integer id, String nombre, String apellido, Integer dni, String correo, String contrasena ) {
        jdbcTemplate.update(
                "CALL SP_ActualizarPerfil(?, ?, ?, ?, ?, ?)",
                id, nombre, apellido, dni, correo, contrasena);
    }

}
===== ./src/main/java/sistema_reservas/dto/HabitacionDto.java =====
package sistema_reservas.dto;

import lombok.Data;

@Data
public class HabitacionDto {

    private int idhabitacion;
    private int numhabitacion;
    private String imagenurl;
}
===== ./src/main/java/sistema_reservas/dto/HabitacionListadoDto.java =====
package sistema_reservas.dto;

import java.util.Date;

import lombok.Data;

@Data
public class HabitacionListadoDto {
	
	private Integer idhabitacion;
    private Integer numHabitacion;
    private Double precioxDia;
    private String tipoHabitacion;
    private String piso;
    private Integer estadoHabId;
    private String estadoHabitacion;
    private Integer estadoReservaId;
    private String estadoReserva;
    private String cliente;
    private Date fechaEntrada;
    private Date fechaSalida;
}
===== ./src/main/java/sistema_reservas/dto/PisoDto.java =====
package sistema_reservas.dto;

import lombok.Data;

@Data
public class PisoDto {

    private int idpiso;
    private String nombre;
}
===== ./src/main/java/sistema_reservas/dto/TipoHabitacionDto.java =====
package sistema_reservas.dto;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;

@Entity
@Table(name = "TipoHabitacion")
@Data
public class TipoHabitacionDto {

    @Id
    private Integer idtipohab;

    private String nombre;
}
===== ./src/main/java/sistema_reservas/dto/UsuarioListadoDto.java =====
package sistema_reservas.dto;

import lombok.Data;

@Data
public class UsuarioListadoDto {

    private Integer idusuario;
    private String nombre;
    private String apellido;
    private Integer dni;
    private String correo;
    private Integer rolId;
    private String rolNombre;
}
===== ./src/main/java/sistema_reservas/login/Login.java =====
package sistema_reservas.login;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class Login {

    @GetMapping("/login")
    public String login(HttpServletRequest request, Model model, @RequestParam(value = "error", required = false) String error) {
        model.addAttribute("currentPath", request.getRequestURI());
        if (error != null) {
            model.addAttribute("error", "Correo o contraseña incorrectos");
        }
        System.out.println("Mostrando página de login (GET)");
        return "login/login";
    }
}
===== ./src/main/java/sistema_reservas/login/ManejadorLogin.java =====
package sistema_reservas.login;

import java.io.IOException;

import org.springframework.security.core.Authentication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import sistema_reservas.model.Usuario;
import sistema_reservas.repository.UsuarioRepository;

@Component
public class ManejadorLogin implements AuthenticationSuccessHandler {

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
                                        HttpServletResponse response,
                                        Authentication authentication)
            throws IOException, ServletException {

        System.out.println("LOGIN ÉXITOSO para: " + authentication.getName());

        String correo = authentication.getName(); // <- corregido aquí también
        Usuario usuario = usuarioRepository.findByCorreo(correo).orElse(null);

        if (usuario != null) {
            request.getSession().setAttribute("usuarioId", usuario.getIdusuario());
            request.getSession().setAttribute("usuarioNombre", usuario.getNombre());
        }

        response.sendRedirect("/rol/redireccionar");
    }

}

===== ./src/main/java/sistema_reservas/model/EstadoHabitacion.java =====
package sistema_reservas.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class EstadoHabitacion {
    @Id
    private Integer idestadohab;

    private String nombre;
}

===== ./src/main/java/sistema_reservas/model/EstadoReserva.java =====
package sistema_reservas.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class EstadoReserva {
    @Id
    private Integer idestadores;

    private String nombre;
}

===== ./src/main/java/sistema_reservas/model/Rol.java =====
package sistema_reservas.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;

@Entity
@Table(name = "Roles")
@Data
public class Rol {
	
	@Id
	private Integer idrol;
	
	private String nombre;

}
===== ./src/main/java/sistema_reservas/model/TipoHabitacion.java =====
package sistema_reservas.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class TipoHabitacion {
	@Id
    private Integer idtipohab;
    private String nombre;
    private String imagenUrl;
    private Double precioxDia;
    private String descripcionHab;
}

===== ./src/main/java/sistema_reservas/model/Usuario.java =====
package sistema_reservas.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "Usuarios")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Usuario {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer idusuario;
	
	private String nombre;
	
	private String apellido;
	
	private Integer dni;
	
	private String correo;
	
	private String password;
	
	@ManyToOne
	@JoinColumn(name="rolid")
	private Rol rol;
}
===== ./src/main/java/sistema_reservas/repository/EstadoHabitacionRepository.java =====
package sistema_reservas.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import sistema_reservas.model.EstadoHabitacion;

public interface EstadoHabitacionRepository extends JpaRepository<EstadoHabitacion, Integer>{

}
===== ./src/main/java/sistema_reservas/repository/EstadoReservaRepository.java =====
package sistema_reservas.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import sistema_reservas.model.EstadoReserva;

public interface EstadoReservaRepository extends JpaRepository<EstadoReserva, Integer> {

}
===== ./src/main/java/sistema_reservas/repository/RolRepository.java =====
package sistema_reservas.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import sistema_reservas.model.Rol;

@Repository
public interface RolRepository extends JpaRepository<Rol, Integer> {

	sistema_reservas.model.Rol findByNombre(String nombre);
}

===== ./src/main/java/sistema_reservas/repository/TipoHabitacionDtoRepository.java =====
package sistema_reservas.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import sistema_reservas.dto.TipoHabitacionDto;

public interface TipoHabitacionDtoRepository extends JpaRepository<TipoHabitacionDto, Integer> {
}
===== ./src/main/java/sistema_reservas/repository/TipoHabitacionRepository.java =====
package sistema_reservas.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import sistema_reservas.model.TipoHabitacion;

public interface TipoHabitacionRepository extends JpaRepository<TipoHabitacion, Integer> {
}
===== ./src/main/java/sistema_reservas/repository/UsuarioRepository.java =====
package sistema_reservas.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import sistema_reservas.model.Usuario;

public interface UsuarioRepository extends JpaRepository<Usuario, Integer>{
	
	Optional<Usuario> findByCorreo(String correo);
	

}
===== ./src/main/java/sistema_reservas/security/AssConfig.java =====
package sistema_reservas.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
public class AssConfig {

	@Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
===== ./src/main/java/sistema_reservas/security/SecurityConfig.java =====
package sistema_reservas.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import sistema_reservas.login.ManejadorLogin;
import sistema_reservas.model.Usuario;
import sistema_reservas.repository.UsuarioRepository;
import sistema_reservas.service.UsuarioService;

@EnableWebSecurity
@Configuration
public class SecurityConfig {
	
	@Autowired
    private UserDetailsService userDetailsService;
	@Autowired
	private ManejadorLogin successHandler;
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		http
		.authorizeHttpRequests(auth -> auth
		        .requestMatchers(
		                "/css/**",
		                "/imagenes/**",
		                "/",                  
		                "/login/**", 
		                "/login/registroUsuario",
		                "/habitaciones",       
		                "/habitaciones/**"     
		        ).permitAll()
		        .requestMatchers("/admin/**").hasRole("ADMIN")
		        .requestMatchers("/cliente/**").hasRole("CLIENTE")
		        .anyRequest().authenticated()
				)
		.formLogin(form -> form
				.loginPage("/login")
				.successHandler(successHandler)
				.failureUrl("/login?error=true")
				.permitAll()
				)
		.logout(logout -> logout
                .logoutUrl("/logout") 
                .logoutSuccessUrl("/")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID") 
                .permitAll()
            );
		System.out.println("Security configurado con UserDetailsService: " + userDetailsService.getClass().getSimpleName());

		return http.build();
	}
	
	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception{
		return config.getAuthenticationManager();
	}
	
	

}
===== ./src/main/java/sistema_reservas/service/HabitacionService.java =====
package sistema_reservas.service;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import sistema_reservas.dao.HabitacionDao;
import sistema_reservas.dto.HabitacionListadoDto;

@Service
public class HabitacionService {

	@Autowired
	private HabitacionDao habitacionDao;
	
	public List<HabitacionListadoDto> obtenerHabitacionesAdmin(){
		return habitacionDao.listarHabitacionesFiltro(null, null, null, null, null);
	}
	
	public List<HabitacionListadoDto> obtenerHabitacionesFiltro(
			Integer tipoHabId, Integer estadoHabId, Integer estadoReservaId,
			Date fechaInicio, Date fechaFin){
		return habitacionDao.listarHabitacionesFiltro(
				tipoHabId, estadoHabId, estadoReservaId, fechaInicio, fechaFin);
	}
}
===== ./src/main/java/sistema_reservas/service/UsuarioService.java =====
package sistema_reservas.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import sistema_reservas.dao.UsuarioDao;
import sistema_reservas.dto.UsuarioListadoDto;
import sistema_reservas.model.Usuario;
import sistema_reservas.repository.UsuarioRepository;

@Service
public class UsuarioService implements UserDetailsService {

    @Autowired
    private UsuarioRepository usuarioRepository;
    @Autowired
    private BCryptPasswordEncoder passwordEncoder;
    @Autowired
    private UsuarioDao usuarioDao;

    @Override
    public UserDetails loadUserByUsername(String correo) throws UsernameNotFoundException {
        System.out.println("Buscando usuario con correo: " + correo);
        Usuario usuario = usuarioRepository.findByCorreo(correo)
                .orElseThrow(() -> {
                    System.out.println("Usuario no encontrado: " + correo);
                    return new UsernameNotFoundException("Usuario no encontrado: " + correo);
                });
        System.out.println("Usuario encontrado: " + usuario.getCorreo() + ", Rol: " + usuario.getRol());
        return User.builder()
                .username(usuario.getCorreo())
                .password(usuario.getPassword())
                .roles(usuario.getRol().getNombre())
                .build();
    }

    public List<UsuarioListadoDto> obtenerUsuarios(Integer rolid){
        return usuarioDao.listarUsuariosPorRol(rolid);
    }

    public Usuario obtenerPerfil(Integer usuarioId) {
        return usuarioDao.obtenerPerfilId(usuarioId);
    }

    public Usuario obtenerPerfilPorCorreo(String correo) {
        return usuarioDao.obtenerPerfilCorreo(correo);
    }

    public void actualizarPerfil(Usuario usuario) {
        String hash = passwordEncoder.encode(usuario.getPassword());

        usuarioDao.actualizarPerfil(
                usuario.getIdusuario(),
                usuario.getNombre(),
                usuario.getApellido(),
                usuario.getDni(),
                usuario.getCorreo(),
                hash);
    }

}
===== ./src/main/java/sistema_reservas/SistemaReservasApplication.java =====
package sistema_reservas;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SistemaReservasApplication {

    public static void main(String[] args) {
        SpringApplication.run(SistemaReservasApplication.class, args);
    }

}
===== ./src/test/java/sistema_reservas/SistemaReservasApplicationTests.java =====
package sistema_reservas;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class SistemaReservasApplicationTests {

    @Test
    void contextLoads() {
    }

}
===== ./src/main/resources/templates/admin/adminConsultas.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
</head>
<body>

	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="admin-contenido">
		<div class="general-container">
			<form th:action="@{/admin/consulta}" method="get" class="form-filtro">
				<div class="primer-container">
					<div class="sub-primer-container">
						<div class="campo">
							<label>Buscar Reserva</label>
							<input type="text" name="codigoReserva" placeholder="Ingrese código" required />
						</div>
						<div class="campo">
							<button type="submit" class="btn">Buscar</button>
						</div>
					</div>
				</div>
			</form>

			<table>
				<thead>
					<tr>
						<th>Cod Reserva</th>
						<th>Cliente</th>
						<th>Habitación</th>
						<th>Tipo</th>
						<th>Piso</th>
						<th>Fecha Entrada</th>
						<th>Fecha Salida</th>
						<th>PrecioxDia</th>
						<th>Días</th>
						<th>Total</th>
						<th>Acción</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="h : ${habitaciones}">
						<td th:text="${h.numHabitacion}"></td>
						<td th:text="${h.tipoHabitacion}"></td>
						<td th:text="${h.piso}"></td>
						<td th:text="${h.precioxDia}"></td>
						<td th:text="${h.estadoHabitacion}"></td>
						<td th:text="${h.estadoReserva}"></td>
						<td th:text="${h.cliente}"></td>
						<td th:text="${#dates.format(h.fechaEntrada, 'dd/MM/yyyy')}"></td>
						<td th:text="${#dates.format(h.fechaSalida, 'dd/MM/yyyy')}"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

</body>
</html>
===== ./src/main/resources/templates/admin/adminEditarPerfil.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Editar Perfil</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body>
	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="perfil-container">
		<div class="perfil-card">
			<div class="perfil-header">
				<div class="avatar">
					<img src="/imagenes/perfil.png" alt="Perfil" />
				</div>
				<h2>Editar Perfil</h2>
			</div>

			<form th:action="@{/admin/perfil/guardar}" method="post"
				class="perfil-form">
				<input type="hidden" th:name="idusuario" th:value="${perfil.idusuario}" />

				<div class="campo-form">
					<label for="nombre">Nombre:</label> <input type="text" id="nombre"
						name="nombre" th:value="${perfil.nombre}" required />
				</div>

				<div class="campo-form">
					<label for="apellido">Apellido:</label> <input type="text"
						id="apellido" name="apellido" th:value="${perfil.apellido}"
						required />
				</div>
				
				<div class="campo-form">
					<label for="dni">DNI:</label> <input type="text" id="dni"
						name="dni" th:value="${perfil.dni}" />
				</div>

				<div class="campo-form">
					<label for="correo">Correo:</label> <input type="email" id="correo"
						name="correo" th:value="${perfil.correo}" required />
				</div>

				<div class="campo-form">
					<label for="password">Contraseña:</label> <input type="password"
						id="password" name="password" placeholder="Nueva contraseña" />
				</div>

				<div class="botones-form">
					<button type="submit" class="btn-guardar">
						<i class="fas fa-save"></i> Guardar
					</button>
					<a th:href="@{/admin/perfil}" class="btn-cancelar"><i
						class="fas fa-times"></i> Cancelar</a>
				</div>

			</form>
		</div>
	</div>
</body>
</html>
===== ./src/main/resources/templates/admin/adminInicio.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
</head>
<body>

	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="admin-contenido">
		<div class="general-container">
			<form th:action="@{/admin/inicio}" method="get" class="form-filtro">
				<div class="primer-container">
					<div class="sub-primer-container">
						<div class="campo">
							<label>Tipo de Habitación</label> <select name="tipoHabId">
								<option value="">Todos</option>
								<option th:each="tipo : ${tipos}" th:value="${tipo.idtipohab}"
									th:text="${tipo.nombre}"></option>
							</select>
						</div>
						<div class="campo">
							<label>Estado Habitación</label> <select name="estadoHabId">
								<option value="">Todos</option>
								<option th:each="estado : ${estadosHab}" th:value="${estado.idestadohab}"
									th:text="${estado.nombre}"></option>
							</select>
						</div>
						<div class="campo">
							<label>Estado Reserva</label> <select name="estadoReservaId">
								<option value="">Todos</option>
								<option th:each="estado : ${estadosReserva}"
									th:value="${estado.idestadores}" th:text="${estado.nombre}"></option>
							</select>
						</div>
						<div class="campo">
							<label>Fecha Entrada</label> <input type="date"
								name="fechaInicio" />
						</div>
						<div class="campo">
							<label>Fecha Salida</label> <input type="date" name="fechaFin" />
						</div>
						<div class="campo">
							<button type="submit" class="btn">Buscar</button>
						</div>
					</div>
				</div>
			</form>

			<table>
				<thead>
					<tr>
						<th>N° Hab.</th>
						<th>Tipo</th>
						<th>Piso</th>
						<th>Precio</th>
						<th>Estado Hab.</th>
						<th>Estado Reserva</th>
						<th>Cliente</th>
						<th>Desde</th>
						<th>Hasta</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="h : ${habitaciones}">
						<td th:text="${h.numHabitacion}"></td>
						<td th:text="${h.tipoHabitacion}"></td>
						<td th:text="${h.piso}"></td>
						<td th:text="${h.precioxDia}"></td>
						<td th:text="${h.estadoHabitacion}"></td>
						<td th:text="${h.estadoReserva}"></td>
						<td th:text="${h.cliente}"></td>
						<td th:text="${#dates.format(h.fechaEntrada, 'dd/MM/yyyy')}"></td>
						<td th:text="${#dates.format(h.fechaSalida, 'dd/MM/yyyy')}"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

</body>
</html>
===== ./src/main/resources/templates/admin/adminPerfil.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body>
	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="perfil-container">
		<div class="perfil-card">
			<div class="perfil-header">
				<div class="avatar">
					<img src="/Imagenes/perfil.png" alt="Perfil" />
				</div>
				<h2>Mi Perfil</h2>
			</div>

			<div class="perfil-datos">
				<div class="dato">
					<label>Nombre:</label> <span th:text="${perfil.nombre}"></span>
				</div>
				<div class="dato">
					<label>Apellido:</label> <span th:text="${perfil.apellido}"></span>
				</div>
				<div class="dato">
					<label>Correo:</label> <span th:text="${perfil.correo}"></span>
				</div>
				<div class="dato">
					<label>Contraseña:</label> <span>**********</span>
				</div>
				<div class="dato-boton">
					<a th:href="@{/admin/perfil/editarPerfil}" class="btn-icon"
						title="Editar"> <i class="fas fa-pen"></i>
					</a>
				</div>
			</div>
		</div>
	</div>

</body>
</html>
===== ./src/main/resources/templates/admin/adminUsuarios.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
</head>
<body>

	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="admin-contenido">
		<div class="general-container">
			<form th:action="@{/admin/usuarios}" method="get" class="form-filtro">
				<div class="primer-container">
					<div class="sub-primer-container">
						<div class="campo">
							<label>Rol del Usuario</label><select name="rolid">
								<option value="">Todos</option>
								<option th:each="r : ${roles}" th:value="${r.idrol}"
									th:text="${r.nombre}"
									th:selected="${rolSeleccionado} == ${r.idrol}"></option>
							</select>
						</div>
						<div class="campo">
							<button type="submit" class="btn">Buscar</button>
						</div>
					</div>
				</div>
			</form>

			<table>
				<thead>
					<tr>
						<th>Nombre</th>
						<th>Apellido</th>
						<th>DNI</th>
						<th>Email</th>
						<th>Rol</th>
						<th>Acción</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="u : ${usuarios}">
						<td th:text="${u.nombre}"></td>
						<td th:text="${u.apellido}"></td>
						<td th:text="${u.dni}"></td>
						<td th:text="${u.correo}"></td>
						<td th:text="${u.rolNombre}"></td>
						<td th:text="${u.rolId}"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

</body>
</html>
===== ./src/main/resources/templates/cliente/clienteHabitaciones.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
<meta charset="UTF-8">
<title>Conoce nuestras habitaciones</title>

<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/cliente.css}">
	<link rel="stylesheet" th:href="@{/css/clienteHab.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />

	<style>

	</style>
</head>
<body>

	<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>


	<div class="cliente-contenido">
		<div class="general-contenido">
			<div class="container text-center mt-5">
				<div class="carousel-contenedor">

					<div id="filtrosContainer" th:if="${pisos != null}">

						<form th:action="@{/cliente/filtrar-habitaciones}" method="post" class="busqueda-box">
							<input type="hidden" name="tipohabId" th:value="${tipohabId}" />

							<div class="campo">
								<label>Fecha Entrada:</label>
								<input type="date" name="fechaEntrada" th:value="${fechaEntrada}" required>
							</div>

							<div class="campo">
								<label>Fecha Salida:</label>
								<input type="date" name="fechaSalida" th:value="${fechaSalida}" required>
							</div>

							<div class="campo">
								<label>Piso Disponible:</label>
								<select name="pisoId" required>
									<option value="" disabled selected>Seleccione un piso</option>
									<option th:each="piso : ${pisos}"
											th:value="${piso.idpiso}"
											th:selected="${piso.idpiso == pisoSeleccionado}"
											th:text="${piso.nombre}">
									</option>
								</select>

							</div>

							<div class="campo">
								<label for="adultos">Adultos:</label>
								<input type="number" id="adultos" name="adultos" min="1" max="10" value="2" th:value="${adultos}" required />
							</div>

							<div class="campo">
								<label for="ninos">Niños:</label>
								<input type="number" id="ninos" name="ninos" min="0" max="10" value="0" th:value="${ninos}" />
							</div>


							<div class="campo boton">
								<button type="submit" class="btn-reserva">Ver Habitaciones Disponibles</button>
							</div>
						</form>

						<!-- Modal de capacidad excedida -->
						<div class="modal" id="modalCapacidad" tabindex="-1" style="display: none;">
							<div class="modal-dialog modal-dialog-centered">
								<div class="modal-content" style="border-radius: 10px;">
									<div class="modal-header" style="background-color: #ffc107;">
										<h5 class="modal-title">Capacidad excedida</h5>
										<button type="button" class="close" onclick="cerrarModal()" style="border: none; background: transparent; font-size: 1.5rem;">&times;</button>
									</div>
									<div class="modal-body">
										<p>⚠️ Las habitaciones del tipo seleccionado tienen una capacidad máxima de 2 personas.</p>
										<p>Por favor, reduzca la cantidad de personas o seleccione otro tipo de habitación.</p>
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-secondary" onclick="cerrarModal()">Cerrar</button>
									</div>
								</div>
							</div>
						</div>

						<div th:if="${habitaciones != null}">
							<h2 style="margin-top: 40px;">Habitaciones Disponibles</h2>

							<div class="habitaciones-grid">
								<div class="habitacion-card" th:each="hab : ${habitaciones}">
									<!-- Fondo con imagen -->
									<div class="habitacion-imagen" th:style="'background-image: url(' + @{${hab.imagenurl}} + ')'">
										<div class="habitacion-overlay">
											<p class="habitacion-numero">Hab. N° <span th:text="${hab.numhabitacion}">101</span></p>
										</div>
									</div>

									<!-- Botón de reservar -->
									<form th:action="@{/cliente/confirmar-reserva}" method="post" class="form-reservar">
										<input type="hidden" name="habitacionId" th:value="${hab.idhabitacion}" />
										<input type="hidden" name="fechaInicio" th:value="${fechaInicio}" />
										<input type="hidden" name="fechaSalida" th:value="${fechaSalida}" />
										<input type="hidden" name="tipohabId" th:value="${tipohabId}" />
										<input type="hidden" name="pisoId" th:value="${pisoSeleccionado}" />
										<input type="hidden" name="capacidad" th:value="${capacidadPersonas}">
										<button type="submit" class="btn-reservar">Reservar</button>
										<button type="submit" name="accion" value="seleccionar" class="btn-seleccion">Añadir a Mi Selección</button>
									</form>
								</div>
								<div th:if="${#lists.isEmpty(habitaciones)}">
									<p style="color:red; font-weight: bold;">No hay habitaciones disponibles con la capacidad indicada.</p>
								</div>
							</div>
						</div>


					</div>


					<div id="tiposContainer" th:if="${pisos == null}">
						<div class="swiper mySwiper">
							<div class="swiper-wrapper">
								<div class="swiper-slide" th:each="hab : ${tipos}">
									<form th:action="@{/cliente/seleccionar-fechas}" method="post">
										<input type="hidden" name="tipohabId" th:value="${hab.idtipohab}" />

										<div class="card-container">
											<div class="card-inner">
												<!-- Front -->
												<div class="card-front">
													<div class="image-container">
														<button type="button" class="flip-icon" title="Ver detalles">
															<i class="fas fa-rotate"></i>
														</button>
														<img th:src="@{${hab.imagenUrl}}" th:alt="${hab.nombre}" />
														<div class="caption" th:text="${hab.nombre}">Tipo</div>
													</div>
												</div>

												<!-- Back -->
												<div class="card-back">
													<button type="button" class="flip-back-icon" title="Volver">
														<i class="fas fa-rotate-left"></i>
													</button>
													<div class="back-content">
														<p><strong>Precio:</strong> S/. <span th:text="${hab.precioxDia}">0.00</span></p>
														<p th:text="${hab.descripcionHab}"></p>
													</div>
												</div>
											</div>

											<div class="btn-container">
												<button type="submit" class="btn-reservar">Lo Quiero...</button>
											</div>
										</div>
									</form>

								</div>
							</div>
							<!-- Botones opcionales -->
							<div class="swiper-button-prev"></div>
							<div class="swiper-button-next"></div>
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>
	<script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
	<script>
		window.onload = function () {
			new Swiper(".mySwiper", {
				effect: "coverflow",
				grabCursor: true,
				centeredSlides: true,
				slidesPerView: 3,
				loop: true,
				coverflowEffect: {
					rotate: 0,
					stretch: 0,
					depth: 100,
					modifier: 1.5,
					slideShadows: false,
				},
				slideToClickedSlide: true,
				navigation: {
					nextEl: ".swiper-button-next",
					prevEl: ".swiper-button-prev",
				},
				on: {
					slideChangeTransitionStart: function () {
						document.querySelectorAll('.card-inner.flipped').forEach(card => {
							card.classList.remove('flipped');
						});
					}
				}
			});
		};
		document.querySelectorAll('.flip-icon').forEach(btn => {
			btn.addEventListener('click', function (e) {
				e.stopPropagation(); // Para evitar efectos colaterales
				const cardInner = this.closest('.card-container').querySelector('.card-inner');
				cardInner.classList.toggle('flipped');
			});
		});

		document.querySelectorAll('.flip-back-icon').forEach(btn => {
			btn.addEventListener('click', function (e) {
				e.stopPropagation();
				const cardInner = this.closest('.card-container').querySelector('.card-inner');
				cardInner.classList.remove('flipped');
			});
		});

		function mostrarModal() {
			document.getElementById("modalCapacidad").style.display = "block";
		}

		function cerrarModal() {
			document.getElementById("modalCapacidad").style.display = "none";
		}

	</script>
	<script th:if="${capacidadExcedida}">
		mostrarModal();
	</script>



</body>
</html>
===== ./src/main/resources/templates/cliente/clienteInicio.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
<meta charset="UTF-8">
<title>Conoce nuestras habitaciones</title>

<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/cliente.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />
</head>
<body>

	<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

	<div class="cliente-contenido">
		<div class="general-contenido">
			<div class="container text-center mt-5">
				<h2 class="mb-4">
					<strong>Conoce nuestras habitaciones</strong>
				</h2>
				<p>Reserva tu habitación ideal con solo unos clics.</p>
				<div class="swiper mySwiper">
					<div class="swiper-wrapper">
						<div class="swiper-slide" th:each="hab : ${tipos}">
							<div class="image-container">
								<img th:src="@{${hab.imagenUrl}}" th:alt="${hab.nombre}">
								<div class="caption" th:text="${hab.nombre}"></div>
							</div>
						</div>
					</div>
					<div class="swiper-button-prev"></div>
					<div class="swiper-button-next"></div>
				</div>

				<div class="redes-sociales">
					<a href="https://facebook.com" target="_blank"><i
						class="fab fa-facebook"></i></a> <a href="https://instagram.com"
						target="_blank"><i class="fab fa-instagram"></i></a> <a
						href="https://wa.me/tuNumero" target="_blank"><i
						class="fab fa-whatsapp"></i></a> <a
						href="mailto:contacto@tuhospedaje.com"><i
						class="fas fa-envelope"></i></a>
				</div>

				<div class="btn-ambar">
					<a class="btn" th:href="@{/habitaciones}">Ver Habitaciones</a>
				</div>
			</div>
		</div>
	</div>

	<script
		src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
	<script>
		var swiper = new Swiper(".mySwiper", {
			effect : "coverflow",
			grabCursor : true,
			centeredSlides : true,
			slidesPerView : 3,
			coverflowEffect : {
				rotate : 20,
				stretch : 0,
				depth : 300,
				modifier : 1,
				slideShadows : true,
			},
			pagination : {
				el : ".swiper-pagination",
				clickable : true,
			},
			navigation : {
				nextEl : ".swiper-button-next",
				prevEl : ".swiper-button-prev",
			},
			loop : true,
			autoplay : {
				delay : 3000,
				disableOnInteraction : false,
			},
		});
	</script>

</body>
</html>
===== ./src/main/resources/templates/cliente/clienteMiseleccion.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
  <meta charset="UTF-8">
  <title>Mi Selección</title>
  <link rel="stylesheet" th:href="@{/css/generalStyle.css}">
  <link rel="stylesheet" th:href="@{/css/cliente.css}">
</head>
<body>

<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

<div class="cliente-contenido">
  <div class="general-contenido">
    <div class="container mt-4">
      <h2>Mi Selección de Habitaciones</h2>

      <div th:if="${seleccion == null or #lists.isEmpty(seleccion)}">
        <p>No tienes habitaciones seleccionadas.</p>
      </div>

      <div th:if="${seleccion != null and !#lists.isEmpty(seleccion)}">
        <table>
          <thead>
          <tr>
            <th>Número</th>
            <th>Imagen</th>
            <th>Fecha Entrada</th>
            <th>Fecha Salida</th>
            <th>Acciones</th>
          </tr>
          </thead>
          <tbody>
          <tr th:each="item, iterStat : ${seleccion}">
            <td th:text="${item.numhabitacion}">101</td>
            <td>
              <img th:src="@{${item.imagenurl}}" alt="Imagen" width="100">
            </td>
            <td th:text="${item.fechaInicio}">2025-06-20</td>
            <td th:text="${item.fechaFin}">2025-06-22</td>
            <td>
              <form th:action="@{/cliente/eliminar-seleccion}" method="post">
                <input type="hidden" name="indice" th:value="${iterStat.index}">
                <button type="submit">Eliminar</button>
              </form>
            </td>
          </tr>
          </tbody>
        </table>

        <form th:action="@{/cliente/confirmar-seleccion}" method="post">
          <button type="submit" class="btn-reservar">Confirmar Reserva</button>
        </form>
      </div>
    </div>
  </div>
</div>

</body>
</html>
===== ./src/main/resources/templates/cliente/clienteMisReservas.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
  <meta charset="UTF-8">
  <title>Mis Reservas</title>
  <link rel="stylesheet" th:href="@{/css/generalStyle.css}">
  <link rel="stylesheet" th:href="@{/css/cliente.css}">
</head>
<body>

<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

<div class="cliente-contenido">
  <div class="general-contenido">
    <div class="container mt-4">
      <h2>		clienteMisReservas.html</h2>

	  clienteMisReservas.html

      </div>
    </div>
  </div>
</div>

</body>
</html>
===== ./src/main/resources/templates/cliente/clientePerfil.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
  <meta charset="UTF-8">
  <title>Perfil</title>
  <link rel="stylesheet" th:href="@{/css/generalStyle.css}">
  <link rel="stylesheet" th:href="@{/css/cliente.css}">
</head>
<body>

<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

<div class="cliente-contenido">
  <div class="general-contenido">
    <div class="container mt-4">
      <h2>		clientePerfil.html</h2>

	  clientePerfil.html

      </div>
    </div>
  </div>
</div>

</body>
</html>
===== ./src/main/resources/templates/fragments/navAdmin.html =====

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<body>
	<nav class="navbar-admin navbar" th:fragment="navbarAdmin">
		<div class="navbar-seccion izquierda">
			<div class="logo">Hospedaje</div>
		</div>

		<div class="navbar-seccion centro">
			<ul class="nav-links">
				<li><a th:href="@{/admin/inicio}"
					th:classappend="${currentPath.startsWith('/admin/inicio') ? 'activo' : ''}">Inicio</a></li>
				<li><a th:href="@{/admin/consultas}"
					th:classappend="${currentPath.startsWith('/admin/consultas') ? 'activo' : ''}">Consultas</a></li>
				<li><a th:href="@{/admin/usuarios}"
					th:classappend="${currentPath.startsWith('/admin/usuarios') ? 'activo' : ''}">Usuarios</a></li>
				<li><a th:href="@{/admin/mantenimientos}"
					th:classappend="${currentPath.startsWith('/admin/mantenimientos') ? 'activo' : ''}">Mantenimientos</a></li>
				<li><a th:href="@{/admin/reportes}"
					th:classappend="${currentPath.startsWith('/admin/reportes') ? 'activo' : ''}">Reportes</a></li>
				<li><a th:href="@{/admin/perfil}"
					th:classappend="${currentPath.startsWith('/admin/perfil') ? 'activo' : ''}">Perfil</a></li>
			</ul>
		</div>

		<div class="navbar-seccion derecha">
			<form th:action="@{/logout}" method="post">
				<input type="hidden" th:name="${_csrf.parameterName}"
					th:value="${_csrf.token}" />
				<button type="submit" class="btn-login">Cerrar Sesión</button>
			</form>
		</div>
	</nav>
</body>
</html>
===== ./src/main/resources/templates/fragments/navCliente.html =====

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<body>
	<nav class="navbar-cliente navbar" th:fragment="navbarCliente">
		<div class="navbar-seccion izquierda">
			<div class="logo">Hospedaje</div>
		</div>
		
		<div class="navbar-seccion centro">
			<ul class="nav-links">
				<li><a th:href="@{/cliente/inicio}"
					th:classappend="${currentPath.startsWith('/cliente/inicio') ? 'activo' : ''}">Inicio</a></li>
				<li><a th:href="@{/cliente/habitaciones}"
					th:classappend="${currentPath.startsWith('/cliente/habitaciones') ? 'activo' : ''}">Habitaciones</a></li>
				<li><a th:href="@{/cliente/mis-reservas}"
					th:classappend="${currentPath.startsWith('/cliente/mis-reservas') ? 'activo' : ''}">Mis
						Reservas</a></li>
				<li><a th:href="@{/cliente/mi-seleccion}"
					th:classappend="${currentPath.startsWith('/cliente/mi-seleccion') ? 'activo' : ''}">Mi
						Selección</a></li>
				<li><a th:href="@{/cliente/perfil}"
					th:classappend="${currentPath.startsWith('/cliente/perfil') ? 'activo' : ''}">Perfil</a></li>
			</ul>
		</div>
		
		<div class="navbar-seccion derecha">
			<form th:action="@{/logout}" method="post">
				<input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>
				<button type="submit" class="btn-login">Cerrar Sesión</button>
			</form>
		</div>
	</nav>
</body>
</html>
===== ./src/main/resources/templates/fragments/navPrincipal.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<body>
	<nav class="navbar" th:fragment="navbar">
		<div class="navbar-seccion izquierda">
			<div class="logo">Hospedaje</div>
		</div>

		<div class="navbar-seccion centro">
			<ul class="nav-links">
				<li><a th:href="@{/}"
					th:classappend="${currentPath == '/' ? 'activo' : ''}">Inicio</a></li>
				<li><a th:href="@{/habitaciones}"
					th:classappend="${currentPath.startsWith('/habitaciones') ? 'activo' : ''}">Habitaciones</a>
				</li>
			</ul>
		</div>

		<div class="navbar-seccion derecha">
			<a class="btn-login" th:href="@{/login}">Iniciar Sesión</a>
		</div>
	</nav>
</body>
</html>===== ./src/main/resources/templates/habitaciones.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Habitaciones</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
</head>
<body>

	<nav th:replace="~{fragments/navPrincipal :: navbar}"></nav>

	<div class="primer-container">
		<div class="reserva-box">
			<div class="row">

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/estandar.png}" class="card-img-top"
							alt="Habitación Estándar">
						<div class="card-body">
							<h5 class="card-title">Habitación Estándar</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/doble.png}" class="card-img-top"
							alt="Habitación Doble">
						<div class="card-body">
							<h5 class="card-title">Habitación Doble</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/ejecutiva.png}" class="card-img-top"
							alt="Habitación Ejecutiva">
						<div class="card-body">
							<h5 class="card-title">Habitación Ejecutiva</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/panoramica.png}" class="card-img-top"
							alt="Habitación Panorámica">
						<div class="card-body">
							<h5 class="card-title">Habitación Panorámica</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/suite_panoramica.png}"
							class="card-img-top" alt="Habitación Suite Panorámica">
						<div class="card-body">
							<h5 class="card-title">Habitación Suite Panorámica</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/suite.png}" class="card-img-top"
							alt="Habitación Suite">
						<div class="card-body">
							<h5 class="card-title">Habitación Suite</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

			</div>
		</div>
	</div>
</body>
</html>
===== ./src/main/resources/templates/index.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Inicio - Hospedaje</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />
</head>
<body>
	<nav th:replace="~{fragments/navPrincipal :: navbar}"></nav>

	<div class="contenedor">
		<div class="general-contenido">
			<div class="container text-center mt-5">
				<h2 class="mb-4">
					<strong>Conoce nuestras habitaciones</strong>
				</h2>
				<p>Reserva tu habitación ideal con solo unos clics.</p>
				<div class="swiper mySwiper">
					<div class="swiper-wrapper">
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{../imagenes/estandar.png}" alt="Estándar">
								<div class="caption">Estándar</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/doble.png}" alt="Doble">
								<div class="caption">Doble</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{../imagenes/ejecutiva.png}" alt="Ejecutiva">
								<div class="caption">Ejecutiva</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/panoramica.png}" alt="Panorámica">
								<div class="caption">Panorámica</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/suite.png}" alt="Suite">
								<div class="caption">Suite</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/suite_panoramica.png}"
									alt="Suite Panorámica">
								<div class="caption">Suite Panorámica</div>
							</div>
						</div>
					</div>
					<div class="swiper-button-prev"></div>
					<div class="swiper-button-next"></div>
				</div>

				<div class="redes-sociales">
					<a href="https://facebook.com" target="_blank"><i
						class="fab fa-facebook"></i></a> <a href="https://instagram.com"
						target="_blank"><i class="fab fa-instagram"></i></a> <a
						href="https://wa.me/tuNumero" target="_blank"><i
						class="fab fa-whatsapp"></i></a> <a
						href="mailto:contacto@tuhospedaje.com"><i
						class="fas fa-envelope"></i></a>
				</div>
				
				<div class="btn-ambar">
					<a class="btn" th:href="@{/habitaciones}">Ver Habitaciones</a>
				</div>
			</div>
		</div>
	</div>

	<script
		src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
	<script>
		var swiper = new Swiper(".mySwiper", {
			effect : "coverflow",
			grabCursor : true,
			centeredSlides : true,
			slidesPerView : 3,
			coverflowEffect : {
				rotate : 20,
				stretch : 0,
				depth : 300,
				modifier : 1,
				slideShadows : true,
			},
			pagination : {
				el : ".swiper-pagination",
				clickable : true,
			},
			navigation : {
				nextEl : ".swiper-button-next",
				prevEl : ".swiper-button-prev",
			},
			loop : true,
			autoplay : {
				delay : 3000,
				disableOnInteraction : false,
			},
		});
	</script>
</body>
</html>

===== ./src/main/resources/templates/login/login.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Iniciar Sesión</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<link rel="stylesheet" th:href="@{/css/login.css}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
	<nav th:replace="~{fragments/navPrincipal :: navbar}"></nav>

	<div class="login-page">
		<div class="login-container">
			<form class="login-box" method="post" th:action="@{/login}">
				<h2>Iniciar Sesión</h2>
				<div th:if="${error}" class="error-message" style="color: red;">
					<p th:text="${error}"></p>
				</div>
				<div class="input-group">
					<label for="correo">Correo electrónico</label> <input type="email"
						id="correo" name="username" required>
				</div>
				<div class="input-group password-container">
					<label for="password">Contraseña</label> <input type="password"
						id="password" name="password" required> <span
						class="toggle-password" onclick="togglePassword('password')">
						<i class="fa fa-eye" id="toggleIconPassword"></i>
					</span>
				</div>
				<input type="hidden" th:name="${_csrf.parameterName}"
					th:value="${_csrf.token}" />
				<button type="submit" class="btn">Entrar</button>
				<p class="enlace-registro">
					¿No tienes cuenta? <a th:href="@{/login/registroUsuario}">Regístrate
						aquí</a>
				</p>
			</form>
		</div>
	</div>
	<script>
		function togglePassword(inputId) {
			const input = document.getElementById(inputId);
			const icon = document.getElementById('toggleIcon'
					+ inputId.charAt(0).toUpperCase() + inputId.slice(1));
			if (input.type === 'password') {
				input.type = 'text';
				icon.classList.remove('fa-eye');
				icon.classList.add('fa-eye-slash');
			} else {
				input.type = 'password';
				icon.classList.remove('fa-eye-slash');
				icon.classList.add('fa-eye');
			}
		}
	</script>
</body>
</html>
===== ./src/main/resources/templates/login/registroUsuario.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Registro</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<link rel="stylesheet" th:href="@{/css/login.css}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>

	<nav th:replace="fragments/navPrincipal :: navbar"></nav>

	<div class="login-page">
		<div class="login-container">
			<form class="login-box" method="post" th:action="@{/login/registroUsuario}">
				<h2>Crear Cuenta</h2>

				<div class="input-group">
					<label for="nombre">Nombre*</label> <input type="text" id="nombre"
						name="nombre" required>
				</div>
				
				<div class="input-group">
					<label for="apellido">Apellido*</label> <input type="text" id="apellido"
						name="apellido" required>
				</div>
				
				<div class="input-group">
					<label for="dni">DNI</label> <input type="text" id="dni"
						name="dni" required>
				</div>

				<div class="input-group">
					<label for="correo">Correo electrónico*</label> <input type="email"
						id="correo" name="correo" required>
				</div>

				<div class="input-group password-container">
                    <label for="contrasena">Contraseña*</label>
                    <input type="password" id="contrasena" name="password" required>
                    <span class="toggle-password" onclick="togglePassword('contrasena')">
                        <i class="fa fa-eye" id="toggleIconContrasena"></i>
                    </span>
                </div>

				<button type="submit" class="btn">Registrarse</button>

				<p class="enlace-registro">
					¿Ya tienes cuenta? <a th:href="@{/login}">Iniciar Sesión</a>
				</p>
			</form>
		</div>
	</div>
	<script>
        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById('toggleIcon' + inputId.charAt(0).toUpperCase() + inputId.slice(1));
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }
    </script>
</body>
</html>
===== ./target/classes/templates/admin/adminConsultas.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
</head>
<body>

	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="admin-contenido">
		<div class="general-container">
			<form th:action="@{/admin/consulta}" method="get" class="form-filtro">
				<div class="primer-container">
					<div class="sub-primer-container">
						<div class="campo">
							<label>Buscar Reserva</label>
							<input type="text" name="codigoReserva" placeholder="Ingrese código" required />
						</div>
						<div class="campo">
							<button type="submit" class="btn">Buscar</button>
						</div>
					</div>
				</div>
			</form>

			<table>
				<thead>
					<tr>
						<th>Cod Reserva</th>
						<th>Cliente</th>
						<th>Habitación</th>
						<th>Tipo</th>
						<th>Piso</th>
						<th>Fecha Entrada</th>
						<th>Fecha Salida</th>
						<th>PrecioxDia</th>
						<th>Días</th>
						<th>Total</th>
						<th>Acción</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="h : ${habitaciones}">
						<td th:text="${h.numHabitacion}"></td>
						<td th:text="${h.tipoHabitacion}"></td>
						<td th:text="${h.piso}"></td>
						<td th:text="${h.precioxDia}"></td>
						<td th:text="${h.estadoHabitacion}"></td>
						<td th:text="${h.estadoReserva}"></td>
						<td th:text="${h.cliente}"></td>
						<td th:text="${#dates.format(h.fechaEntrada, 'dd/MM/yyyy')}"></td>
						<td th:text="${#dates.format(h.fechaSalida, 'dd/MM/yyyy')}"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

</body>
</html>
===== ./target/classes/templates/admin/adminEditarPerfil.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Editar Perfil</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body>
	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="perfil-container">
		<div class="perfil-card">
			<div class="perfil-header">
				<div class="avatar">
					<img src="/imagenes/perfil.png" alt="Perfil" />
				</div>
				<h2>Editar Perfil</h2>
			</div>

			<form th:action="@{/admin/perfil/guardar}" method="post"
				class="perfil-form">
				<input type="hidden" th:name="idusuario" th:value="${perfil.idusuario}" />

				<div class="campo-form">
					<label for="nombre">Nombre:</label> <input type="text" id="nombre"
						name="nombre" th:value="${perfil.nombre}" required />
				</div>

				<div class="campo-form">
					<label for="apellido">Apellido:</label> <input type="text"
						id="apellido" name="apellido" th:value="${perfil.apellido}"
						required />
				</div>
				
				<div class="campo-form">
					<label for="dni">DNI:</label> <input type="text" id="dni"
						name="dni" th:value="${perfil.dni}" />
				</div>

				<div class="campo-form">
					<label for="correo">Correo:</label> <input type="email" id="correo"
						name="correo" th:value="${perfil.correo}" required />
				</div>

				<div class="campo-form">
					<label for="password">Contraseña:</label> <input type="password"
						id="password" name="password" placeholder="Nueva contraseña" />
				</div>

				<div class="botones-form">
					<button type="submit" class="btn-guardar">
						<i class="fas fa-save"></i> Guardar
					</button>
					<a th:href="@{/admin/perfil}" class="btn-cancelar"><i
						class="fas fa-times"></i> Cancelar</a>
				</div>

			</form>
		</div>
	</div>
</body>
</html>
===== ./target/classes/templates/admin/adminInicio.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
</head>
<body>

	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="admin-contenido">
		<div class="general-container">
			<form th:action="@{/admin/inicio}" method="get" class="form-filtro">
				<div class="primer-container">
					<div class="sub-primer-container">
						<div class="campo">
							<label>Tipo de Habitación</label> <select name="tipoHabId">
								<option value="">Todos</option>
								<option th:each="tipo : ${tipos}" th:value="${tipo.idtipohab}"
									th:text="${tipo.nombre}"></option>
							</select>
						</div>
						<div class="campo">
							<label>Estado Habitación</label> <select name="estadoHabId">
								<option value="">Todos</option>
								<option th:each="estado : ${estadosHab}" th:value="${estado.idestadohab}"
									th:text="${estado.nombre}"></option>
							</select>
						</div>
						<div class="campo">
							<label>Estado Reserva</label> <select name="estadoReservaId">
								<option value="">Todos</option>
								<option th:each="estado : ${estadosReserva}"
									th:value="${estado.idestadores}" th:text="${estado.nombre}"></option>
							</select>
						</div>
						<div class="campo">
							<label>Fecha Entrada</label> <input type="date"
								name="fechaInicio" />
						</div>
						<div class="campo">
							<label>Fecha Salida</label> <input type="date" name="fechaFin" />
						</div>
						<div class="campo">
							<button type="submit" class="btn">Buscar</button>
						</div>
					</div>
				</div>
			</form>

			<table>
				<thead>
					<tr>
						<th>N° Hab.</th>
						<th>Tipo</th>
						<th>Piso</th>
						<th>Precio</th>
						<th>Estado Hab.</th>
						<th>Estado Reserva</th>
						<th>Cliente</th>
						<th>Desde</th>
						<th>Hasta</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="h : ${habitaciones}">
						<td th:text="${h.numHabitacion}"></td>
						<td th:text="${h.tipoHabitacion}"></td>
						<td th:text="${h.piso}"></td>
						<td th:text="${h.precioxDia}"></td>
						<td th:text="${h.estadoHabitacion}"></td>
						<td th:text="${h.estadoReserva}"></td>
						<td th:text="${h.cliente}"></td>
						<td th:text="${#dates.format(h.fechaEntrada, 'dd/MM/yyyy')}"></td>
						<td th:text="${#dates.format(h.fechaSalida, 'dd/MM/yyyy')}"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

</body>
</html>
===== ./target/classes/templates/admin/adminPerfil.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
</head>
<body>
	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="perfil-container">
		<div class="perfil-card">
			<div class="perfil-header">
				<div class="avatar">
					<img src="/Imagenes/perfil.png" alt="Perfil" />
				</div>
				<h2>Mi Perfil</h2>
			</div>

			<div class="perfil-datos">
				<div class="dato">
					<label>Nombre:</label> <span th:text="${perfil.nombre}"></span>
				</div>
				<div class="dato">
					<label>Apellido:</label> <span th:text="${perfil.apellido}"></span>
				</div>
				<div class="dato">
					<label>Correo:</label> <span th:text="${perfil.correo}"></span>
				</div>
				<div class="dato">
					<label>Contraseña:</label> <span>**********</span>
				</div>
				<div class="dato-boton">
					<a th:href="@{/admin/perfil/editarPerfil}" class="btn-icon"
						title="Editar"> <i class="fas fa-pen"></i>
					</a>
				</div>
			</div>
		</div>
	</div>

</body>
</html>
===== ./target/classes/templates/admin/adminUsuarios.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Panel Administrador</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/admin.css}">
</head>
<body>

	<nav th:replace="~{fragments/navAdmin :: navbarAdmin}"></nav>

	<div class="admin-contenido">
		<div class="general-container">
			<form th:action="@{/admin/usuarios}" method="get" class="form-filtro">
				<div class="primer-container">
					<div class="sub-primer-container">
						<div class="campo">
							<label>Rol del Usuario</label><select name="rolid">
								<option value="">Todos</option>
								<option th:each="r : ${roles}" th:value="${r.idrol}"
									th:text="${r.nombre}"
									th:selected="${rolSeleccionado} == ${r.idrol}"></option>
							</select>
						</div>
						<div class="campo">
							<button type="submit" class="btn">Buscar</button>
						</div>
					</div>
				</div>
			</form>

			<table>
				<thead>
					<tr>
						<th>Nombre</th>
						<th>Apellido</th>
						<th>DNI</th>
						<th>Email</th>
						<th>Rol</th>
						<th>Acción</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="u : ${usuarios}">
						<td th:text="${u.nombre}"></td>
						<td th:text="${u.apellido}"></td>
						<td th:text="${u.dni}"></td>
						<td th:text="${u.correo}"></td>
						<td th:text="${u.rolNombre}"></td>
						<td th:text="${u.rolId}"></td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>

</body>
</html>
===== ./target/classes/templates/cliente/clienteHabitaciones.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
<meta charset="UTF-8">
<title>Conoce nuestras habitaciones</title>

<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/cliente.css}">
	<link rel="stylesheet" th:href="@{/css/clienteHab.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />

	<style>

	</style>
</head>
<body>

	<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>


	<div class="cliente-contenido">
		<div class="general-contenido">
			<div class="container text-center mt-5">
				<div class="carousel-contenedor">

					<div id="filtrosContainer" th:if="${pisos != null}">

						<form th:action="@{/cliente/filtrar-habitaciones}" method="post" class="busqueda-box">
							<input type="hidden" name="tipohabId" th:value="${tipohabId}" />

							<div class="campo">
								<label>Fecha Entrada:</label>
								<input type="date" name="fechaEntrada" th:value="${fechaEntrada}" required>
							</div>

							<div class="campo">
								<label>Fecha Salida:</label>
								<input type="date" name="fechaSalida" th:value="${fechaSalida}" required>
							</div>

							<div class="campo">
								<label>Piso Disponible:</label>
								<select name="pisoId" required>
									<option value="" disabled selected>Seleccione un piso</option>
									<option th:each="piso : ${pisos}"
											th:value="${piso.idpiso}"
											th:selected="${piso.idpiso == pisoSeleccionado}"
											th:text="${piso.nombre}">
									</option>
								</select>

							</div>

							<div class="campo">
								<label for="adultos">Adultos:</label>
								<input type="number" id="adultos" name="adultos" min="1" max="10" value="2" th:value="${adultos}" required />
							</div>

							<div class="campo">
								<label for="ninos">Niños:</label>
								<input type="number" id="ninos" name="ninos" min="0" max="10" value="0" th:value="${ninos}" />
							</div>


							<div class="campo boton">
								<button type="submit" class="btn-reserva">Ver Habitaciones Disponibles</button>
							</div>
						</form>

						<!-- Modal de capacidad excedida -->
						<div class="modal" id="modalCapacidad" tabindex="-1" style="display: none;">
							<div class="modal-dialog modal-dialog-centered">
								<div class="modal-content" style="border-radius: 10px;">
									<div class="modal-header" style="background-color: #ffc107;">
										<h5 class="modal-title">Capacidad excedida</h5>
										<button type="button" class="close" onclick="cerrarModal()" style="border: none; background: transparent; font-size: 1.5rem;">&times;</button>
									</div>
									<div class="modal-body">
										<p>⚠️ Las habitaciones del tipo seleccionado tienen una capacidad máxima de 2 personas.</p>
										<p>Por favor, reduzca la cantidad de personas o seleccione otro tipo de habitación.</p>
									</div>
									<div class="modal-footer">
										<button type="button" class="btn btn-secondary" onclick="cerrarModal()">Cerrar</button>
									</div>
								</div>
							</div>
						</div>

						<div th:if="${habitaciones != null}">
							<h2 style="margin-top: 40px;">Habitaciones Disponibles</h2>

							<div class="habitaciones-grid">
								<div class="habitacion-card" th:each="hab : ${habitaciones}">
									<!-- Fondo con imagen -->
									<div class="habitacion-imagen" th:style="'background-image: url(' + @{${hab.imagenurl}} + ')'">
										<div class="habitacion-overlay">
											<p class="habitacion-numero">Hab. N° <span th:text="${hab.numhabitacion}">101</span></p>
										</div>
									</div>

									<!-- Botón de reservar -->
									<form th:action="@{/cliente/confirmar-reserva}" method="post" class="form-reservar">
										<input type="hidden" name="habitacionId" th:value="${hab.idhabitacion}" />
										<input type="hidden" name="fechaInicio" th:value="${fechaInicio}" />
										<input type="hidden" name="fechaSalida" th:value="${fechaSalida}" />
										<input type="hidden" name="tipohabId" th:value="${tipohabId}" />
										<input type="hidden" name="pisoId" th:value="${pisoSeleccionado}" />
										<input type="hidden" name="capacidad" th:value="${capacidadPersonas}">
										<button type="submit" class="btn-reservar">Reservar</button>
										<button type="submit" name="accion" value="seleccionar" class="btn-seleccion">Añadir a Mi Selección</button>
									</form>
								</div>
								<div th:if="${#lists.isEmpty(habitaciones)}">
									<p style="color:red; font-weight: bold;">No hay habitaciones disponibles con la capacidad indicada.</p>
								</div>
							</div>
						</div>


					</div>


					<div id="tiposContainer" th:if="${pisos == null}">
						<div class="swiper mySwiper">
							<div class="swiper-wrapper">
								<div class="swiper-slide" th:each="hab : ${tipos}">
									<form th:action="@{/cliente/seleccionar-fechas}" method="post">
										<input type="hidden" name="tipohabId" th:value="${hab.idtipohab}" />

										<div class="card-container">
											<div class="card-inner">
												<!-- Front -->
												<div class="card-front">
													<div class="image-container">
														<button type="button" class="flip-icon" title="Ver detalles">
															<i class="fas fa-rotate"></i>
														</button>
														<img th:src="@{${hab.imagenUrl}}" th:alt="${hab.nombre}" />
														<div class="caption" th:text="${hab.nombre}">Tipo</div>
													</div>
												</div>

												<!-- Back -->
												<div class="card-back">
													<button type="button" class="flip-back-icon" title="Volver">
														<i class="fas fa-rotate-left"></i>
													</button>
													<div class="back-content">
														<p><strong>Precio:</strong> S/. <span th:text="${hab.precioxDia}">0.00</span></p>
														<p th:text="${hab.descripcionHab}"></p>
													</div>
												</div>
											</div>

											<div class="btn-container">
												<button type="submit" class="btn-reservar">Lo Quiero...</button>
											</div>
										</div>
									</form>

								</div>
							</div>
							<!-- Botones opcionales -->
							<div class="swiper-button-prev"></div>
							<div class="swiper-button-next"></div>
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>
	<script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
	<script>
		window.onload = function () {
			new Swiper(".mySwiper", {
				effect: "coverflow",
				grabCursor: true,
				centeredSlides: true,
				slidesPerView: 3,
				loop: true,
				coverflowEffect: {
					rotate: 0,
					stretch: 0,
					depth: 100,
					modifier: 1.5,
					slideShadows: false,
				},
				slideToClickedSlide: true,
				navigation: {
					nextEl: ".swiper-button-next",
					prevEl: ".swiper-button-prev",
				},
				on: {
					slideChangeTransitionStart: function () {
						document.querySelectorAll('.card-inner.flipped').forEach(card => {
							card.classList.remove('flipped');
						});
					}
				}
			});
		};
		document.querySelectorAll('.flip-icon').forEach(btn => {
			btn.addEventListener('click', function (e) {
				e.stopPropagation(); // Para evitar efectos colaterales
				const cardInner = this.closest('.card-container').querySelector('.card-inner');
				cardInner.classList.toggle('flipped');
			});
		});

		document.querySelectorAll('.flip-back-icon').forEach(btn => {
			btn.addEventListener('click', function (e) {
				e.stopPropagation();
				const cardInner = this.closest('.card-container').querySelector('.card-inner');
				cardInner.classList.remove('flipped');
			});
		});

		function mostrarModal() {
			document.getElementById("modalCapacidad").style.display = "block";
		}

		function cerrarModal() {
			document.getElementById("modalCapacidad").style.display = "none";
		}

	</script>
	<script th:if="${capacidadExcedida}">
		mostrarModal();
	</script>



</body>
</html>
===== ./target/classes/templates/cliente/clienteInicio.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
<meta charset="UTF-8">
<title>Conoce nuestras habitaciones</title>

<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/cliente.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />
</head>
<body>

	<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

	<div class="cliente-contenido">
		<div class="general-contenido">
			<div class="container text-center mt-5">
				<h2 class="mb-4">
					<strong>Conoce nuestras habitaciones</strong>
				</h2>
				<p>Reserva tu habitación ideal con solo unos clics.</p>
				<div class="swiper mySwiper">
					<div class="swiper-wrapper">
						<div class="swiper-slide" th:each="hab : ${tipos}">
							<div class="image-container">
								<img th:src="@{${hab.imagenUrl}}" th:alt="${hab.nombre}">
								<div class="caption" th:text="${hab.nombre}"></div>
							</div>
						</div>
					</div>
					<div class="swiper-button-prev"></div>
					<div class="swiper-button-next"></div>
				</div>

				<div class="redes-sociales">
					<a href="https://facebook.com" target="_blank"><i
						class="fab fa-facebook"></i></a> <a href="https://instagram.com"
						target="_blank"><i class="fab fa-instagram"></i></a> <a
						href="https://wa.me/tuNumero" target="_blank"><i
						class="fab fa-whatsapp"></i></a> <a
						href="mailto:contacto@tuhospedaje.com"><i
						class="fas fa-envelope"></i></a>
				</div>

				<div class="btn-ambar">
					<a class="btn" th:href="@{/habitaciones}">Ver Habitaciones</a>
				</div>
			</div>
		</div>
	</div>

	<script
		src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
	<script>
		var swiper = new Swiper(".mySwiper", {
			effect : "coverflow",
			grabCursor : true,
			centeredSlides : true,
			slidesPerView : 3,
			coverflowEffect : {
				rotate : 20,
				stretch : 0,
				depth : 300,
				modifier : 1,
				slideShadows : true,
			},
			pagination : {
				el : ".swiper-pagination",
				clickable : true,
			},
			navigation : {
				nextEl : ".swiper-button-next",
				prevEl : ".swiper-button-prev",
			},
			loop : true,
			autoplay : {
				delay : 3000,
				disableOnInteraction : false,
			},
		});
	</script>

</body>
</html>
===== ./target/classes/templates/cliente/clienteMiseleccion.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
  <meta charset="UTF-8">
  <title>Mi Selección</title>
  <link rel="stylesheet" th:href="@{/css/generalStyle.css}">
  <link rel="stylesheet" th:href="@{/css/cliente.css}">
</head>
<body>

<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

<div class="cliente-contenido">
  <div class="general-contenido">
    <div class="container mt-4">
      <h2>Mi Selección de Habitaciones</h2>

      <div th:if="${seleccion == null or #lists.isEmpty(seleccion)}">
        <p>No tienes habitaciones seleccionadas.</p>
      </div>

      <div th:if="${seleccion != null and !#lists.isEmpty(seleccion)}">
        <table>
          <thead>
          <tr>
            <th>Número</th>
            <th>Imagen</th>
            <th>Fecha Entrada</th>
            <th>Fecha Salida</th>
            <th>Acciones</th>
          </tr>
          </thead>
          <tbody>
          <tr th:each="item, iterStat : ${seleccion}">
            <td th:text="${item.numhabitacion}">101</td>
            <td>
              <img th:src="@{${item.imagenurl}}" alt="Imagen" width="100">
            </td>
            <td th:text="${item.fechaInicio}">2025-06-20</td>
            <td th:text="${item.fechaFin}">2025-06-22</td>
            <td>
              <form th:action="@{/cliente/eliminar-seleccion}" method="post">
                <input type="hidden" name="indice" th:value="${iterStat.index}">
                <button type="submit">Eliminar</button>
              </form>
            </td>
          </tr>
          </tbody>
        </table>

        <form th:action="@{/cliente/confirmar-seleccion}" method="post">
          <button type="submit" class="btn-reservar">Confirmar Reserva</button>
        </form>
      </div>
    </div>
  </div>
</div>

</body>
</html>
===== ./target/classes/templates/cliente/clienteMisReservas.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
  <meta charset="UTF-8">
  <title>Mis Reservas</title>
  <link rel="stylesheet" th:href="@{/css/generalStyle.css}">
  <link rel="stylesheet" th:href="@{/css/cliente.css}">
</head>
<body>

<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

<div class="cliente-contenido">
  <div class="general-contenido">
    <div class="container mt-4">
      <h2>		clienteMisReservas.html</h2>

	  clienteMisReservas.html

      </div>
    </div>
  </div>
</div>

</body>
</html>
===== ./target/classes/templates/cliente/clientePerfil.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" lang="es">
<head>
  <meta charset="UTF-8">
  <title>Perfil</title>
  <link rel="stylesheet" th:href="@{/css/generalStyle.css}">
  <link rel="stylesheet" th:href="@{/css/cliente.css}">
</head>
<body>

<nav th:replace="~{fragments/navCliente :: navbarCliente}"></nav>

<div class="cliente-contenido">
  <div class="general-contenido">
    <div class="container mt-4">
      <h2>		clientePerfil.html</h2>

	  clientePerfil.html

      </div>
    </div>
  </div>
</div>

</body>
</html>
===== ./target/classes/templates/fragments/navAdmin.html =====

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<body>
	<nav class="navbar-admin navbar" th:fragment="navbarAdmin">
		<div class="navbar-seccion izquierda">
			<div class="logo">Hospedaje</div>
		</div>

		<div class="navbar-seccion centro">
			<ul class="nav-links">
				<li><a th:href="@{/admin/inicio}"
					th:classappend="${currentPath.startsWith('/admin/inicio') ? 'activo' : ''}">Inicio</a></li>
				<li><a th:href="@{/admin/consultas}"
					th:classappend="${currentPath.startsWith('/admin/consultas') ? 'activo' : ''}">Consultas</a></li>
				<li><a th:href="@{/admin/usuarios}"
					th:classappend="${currentPath.startsWith('/admin/usuarios') ? 'activo' : ''}">Usuarios</a></li>
				<li><a th:href="@{/admin/mantenimientos}"
					th:classappend="${currentPath.startsWith('/admin/mantenimientos') ? 'activo' : ''}">Mantenimientos</a></li>
				<li><a th:href="@{/admin/reportes}"
					th:classappend="${currentPath.startsWith('/admin/reportes') ? 'activo' : ''}">Reportes</a></li>
				<li><a th:href="@{/admin/perfil}"
					th:classappend="${currentPath.startsWith('/admin/perfil') ? 'activo' : ''}">Perfil</a></li>
			</ul>
		</div>

		<div class="navbar-seccion derecha">
			<form th:action="@{/logout}" method="post">
				<input type="hidden" th:name="${_csrf.parameterName}"
					th:value="${_csrf.token}" />
				<button type="submit" class="btn-login">Cerrar Sesión</button>
			</form>
		</div>
	</nav>
</body>
</html>
===== ./target/classes/templates/fragments/navCliente.html =====

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<body>
	<nav class="navbar-cliente navbar" th:fragment="navbarCliente">
		<div class="navbar-seccion izquierda">
			<div class="logo">Hospedaje</div>
		</div>
		
		<div class="navbar-seccion centro">
			<ul class="nav-links">
				<li><a th:href="@{/cliente/inicio}"
					th:classappend="${currentPath.startsWith('/cliente/inicio') ? 'activo' : ''}">Inicio</a></li>
				<li><a th:href="@{/cliente/habitaciones}"
					th:classappend="${currentPath.startsWith('/cliente/habitaciones') ? 'activo' : ''}">Habitaciones</a></li>
				<li><a th:href="@{/cliente/mis-reservas}"
					th:classappend="${currentPath.startsWith('/cliente/mis-reservas') ? 'activo' : ''}">Mis
						Reservas</a></li>
				<li><a th:href="@{/cliente/mi-seleccion}"
					th:classappend="${currentPath.startsWith('/cliente/mi-seleccion') ? 'activo' : ''}">Mi
						Selección</a></li>
				<li><a th:href="@{/cliente/perfil}"
					th:classappend="${currentPath.startsWith('/cliente/perfil') ? 'activo' : ''}">Perfil</a></li>
			</ul>
		</div>
		
		<div class="navbar-seccion derecha">
			<form th:action="@{/logout}" method="post">
				<input type="hidden" th:name="${_csrf.parameterName}" th:value="${_csrf.token}"/>
				<button type="submit" class="btn-login">Cerrar Sesión</button>
			</form>
		</div>
	</nav>
</body>
</html>
===== ./target/classes/templates/fragments/navPrincipal.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<body>
	<nav class="navbar" th:fragment="navbar">
		<div class="navbar-seccion izquierda">
			<div class="logo">Hospedaje</div>
		</div>

		<div class="navbar-seccion centro">
			<ul class="nav-links">
				<li><a th:href="@{/}"
					th:classappend="${currentPath == '/' ? 'activo' : ''}">Inicio</a></li>
				<li><a th:href="@{/habitaciones}"
					th:classappend="${currentPath.startsWith('/habitaciones') ? 'activo' : ''}">Habitaciones</a>
				</li>
			</ul>
		</div>

		<div class="navbar-seccion derecha">
			<a class="btn-login" th:href="@{/login}">Iniciar Sesión</a>
		</div>
	</nav>
</body>
</html>===== ./target/classes/templates/habitaciones.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Habitaciones</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
</head>
<body>

	<nav th:replace="~{fragments/navPrincipal :: navbar}"></nav>

	<div class="primer-container">
		<div class="reserva-box">
			<div class="row">

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/estandar.png}" class="card-img-top"
							alt="Habitación Estándar">
						<div class="card-body">
							<h5 class="card-title">Habitación Estándar</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/doble.png}" class="card-img-top"
							alt="Habitación Doble">
						<div class="card-body">
							<h5 class="card-title">Habitación Doble</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/ejecutiva.png}" class="card-img-top"
							alt="Habitación Ejecutiva">
						<div class="card-body">
							<h5 class="card-title">Habitación Ejecutiva</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/panoramica.png}" class="card-img-top"
							alt="Habitación Panorámica">
						<div class="card-body">
							<h5 class="card-title">Habitación Panorámica</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/suite_panoramica.png}"
							class="card-img-top" alt="Habitación Suite Panorámica">
						<div class="card-body">
							<h5 class="card-title">Habitación Suite Panorámica</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

				<div class="col-md-4">
					<div class="card">
						<img th:src="@{/imagenes/suite.png}" class="card-img-top"
							alt="Habitación Suite">
						<div class="card-body">
							<h5 class="card-title">Habitación Suite</h5>
							<a th:href="@{/login}" class="btn btn-primary">Reservar</a>
						</div>
					</div>
				</div>

			</div>
		</div>
	</div>
</body>
</html>
===== ./target/classes/templates/index.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Inicio - Hospedaje</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet"
	href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />
</head>
<body>
	<nav th:replace="~{fragments/navPrincipal :: navbar}"></nav>

	<div class="contenedor">
		<div class="general-contenido">
			<div class="container text-center mt-5">
				<h2 class="mb-4">
					<strong>Conoce nuestras habitaciones</strong>
				</h2>
				<p>Reserva tu habitación ideal con solo unos clics.</p>
				<div class="swiper mySwiper">
					<div class="swiper-wrapper">
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{../imagenes/estandar.png}" alt="Estándar">
								<div class="caption">Estándar</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/doble.png}" alt="Doble">
								<div class="caption">Doble</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{../imagenes/ejecutiva.png}" alt="Ejecutiva">
								<div class="caption">Ejecutiva</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/panoramica.png}" alt="Panorámica">
								<div class="caption">Panorámica</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/suite.png}" alt="Suite">
								<div class="caption">Suite</div>
							</div>
						</div>
						<div class="swiper-slide">
							<div class="image-container">
								<img th:src="@{/imagenes/suite_panoramica.png}"
									alt="Suite Panorámica">
								<div class="caption">Suite Panorámica</div>
							</div>
						</div>
					</div>
					<div class="swiper-button-prev"></div>
					<div class="swiper-button-next"></div>
				</div>

				<div class="redes-sociales">
					<a href="https://facebook.com" target="_blank"><i
						class="fab fa-facebook"></i></a> <a href="https://instagram.com"
						target="_blank"><i class="fab fa-instagram"></i></a> <a
						href="https://wa.me/tuNumero" target="_blank"><i
						class="fab fa-whatsapp"></i></a> <a
						href="mailto:contacto@tuhospedaje.com"><i
						class="fas fa-envelope"></i></a>
				</div>
				
				<div class="btn-ambar">
					<a class="btn" th:href="@{/habitaciones}">Ver Habitaciones</a>
				</div>
			</div>
		</div>
	</div>

	<script
		src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
	<script>
		var swiper = new Swiper(".mySwiper", {
			effect : "coverflow",
			grabCursor : true,
			centeredSlides : true,
			slidesPerView : 3,
			coverflowEffect : {
				rotate : 20,
				stretch : 0,
				depth : 300,
				modifier : 1,
				slideShadows : true,
			},
			pagination : {
				el : ".swiper-pagination",
				clickable : true,
			},
			navigation : {
				nextEl : ".swiper-button-next",
				prevEl : ".swiper-button-prev",
			},
			loop : true,
			autoplay : {
				delay : 3000,
				disableOnInteraction : false,
			},
		});
	</script>
</body>
</html>

===== ./target/classes/templates/login/login.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Iniciar Sesión</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<link rel="stylesheet" th:href="@{/css/login.css}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
	<nav th:replace="~{fragments/navPrincipal :: navbar}"></nav>

	<div class="login-page">
		<div class="login-container">
			<form class="login-box" method="post" th:action="@{/login}">
				<h2>Iniciar Sesión</h2>
				<div th:if="${error}" class="error-message" style="color: red;">
					<p th:text="${error}"></p>
				</div>
				<div class="input-group">
					<label for="correo">Correo electrónico</label> <input type="email"
						id="correo" name="username" required>
				</div>
				<div class="input-group password-container">
					<label for="password">Contraseña</label> <input type="password"
						id="password" name="password" required> <span
						class="toggle-password" onclick="togglePassword('password')">
						<i class="fa fa-eye" id="toggleIconPassword"></i>
					</span>
				</div>
				<input type="hidden" th:name="${_csrf.parameterName}"
					th:value="${_csrf.token}" />
				<button type="submit" class="btn">Entrar</button>
				<p class="enlace-registro">
					¿No tienes cuenta? <a th:href="@{/login/registroUsuario}">Regístrate
						aquí</a>
				</p>
			</form>
		</div>
	</div>
	<script>
		function togglePassword(inputId) {
			const input = document.getElementById(inputId);
			const icon = document.getElementById('toggleIcon'
					+ inputId.charAt(0).toUpperCase() + inputId.slice(1));
			if (input.type === 'password') {
				input.type = 'text';
				icon.classList.remove('fa-eye');
				icon.classList.add('fa-eye-slash');
			} else {
				input.type = 'password';
				icon.classList.remove('fa-eye-slash');
				icon.classList.add('fa-eye');
			}
		}
	</script>
</body>
</html>
===== ./target/classes/templates/login/registroUsuario.html =====
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="UTF-8">
<title>Registro</title>
<link rel="stylesheet" th:href="@{/css/generalStyle.css}">
<link rel="stylesheet" th:href="@{/css/mainStyle.css}">
<link rel="stylesheet" th:href="@{/css/login.css}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>

	<nav th:replace="fragments/navPrincipal :: navbar"></nav>

	<div class="login-page">
		<div class="login-container">
			<form class="login-box" method="post" th:action="@{/login/registroUsuario}">
				<h2>Crear Cuenta</h2>

				<div class="input-group">
					<label for="nombre">Nombre*</label> <input type="text" id="nombre"
						name="nombre" required>
				</div>
				
				<div class="input-group">
					<label for="apellido">Apellido*</label> <input type="text" id="apellido"
						name="apellido" required>
				</div>
				
				<div class="input-group">
					<label for="dni">DNI</label> <input type="text" id="dni"
						name="dni" required>
				</div>

				<div class="input-group">
					<label for="correo">Correo electrónico*</label> <input type="email"
						id="correo" name="correo" required>
				</div>

				<div class="input-group password-container">
                    <label for="contrasena">Contraseña*</label>
                    <input type="password" id="contrasena" name="password" required>
                    <span class="toggle-password" onclick="togglePassword('contrasena')">
                        <i class="fa fa-eye" id="toggleIconContrasena"></i>
                    </span>
                </div>

				<button type="submit" class="btn">Registrarse</button>

				<p class="enlace-registro">
					¿Ya tienes cuenta? <a th:href="@{/login}">Iniciar Sesión</a>
				</p>
			</form>
		</div>
	</div>
	<script>
        function togglePassword(inputId) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById('toggleIcon' + inputId.charAt(0).toUpperCase() + inputId.slice(1));
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }
    </script>
</body>
</html>
